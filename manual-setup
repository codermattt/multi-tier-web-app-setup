 1. Oracle VM Virtualbox
 2. Vagrant
 3. Vagrant plugins
 - Execute below command in your computer to install hostmanager plugin
   - vagrant plugin install vagrant-hostmanager       (generates the Vagrantfile with the multi-vm configurations)
 4. Git bash or equivalent editor

VM SETUP:
1. Clone source code.
   - git clone https://github.com/hkhcoder/vprofile-project.git
2. Cd into the repository.
3. Switch to the local branch.
4. cd into vagrant/Manual_provisioning
   - Bring up vm’s
   -  vagrant up
   Note: Bringing up all the vm’s may take a long time based on various factors.
   - vagrant ssh app01     (login to any of the vms in Vagrantfile)

   Note: All the vm’s hostname and /etc/hosts file entries will be automatically updated
   - ping vm_name -c 4   (Can check for hostname to ip mapping connection) 

                                 1. MYSQL Setup
- vagrant ssh db01  (Login to the db vm)
- cat /etc/hosts    (Verify Hosts entry, if entries missing update the it with IP and hostnames)
- dnf update -y     (Update OS with latest patches)
- dnf install epel-release -y    {Set Repository)
- dnf install git mariadb-server -y     (Install Maria DB Package)

Starting & enabling mariadb-server
- systemctl start mariadb
- systemctl enable MariaDB
- mysql_secure_installation     (RUN mysql secure installation script, follow prompts accordingly)
- mysql -u root -padmin123      (Set DB name and users with priviledges, type "exit" to from MySQL prompts)

Download Source code & Initialize Database
- cd /tmp/
- git clone -b local https://github.com/hkhcoder/vprofile-project.git
- cd vprofile-project
- mysql -u root -padmin123 accounts < src/main/resources/db_backup.sql
- mysql -u root -padmin123 accounts  

- systemctl restart MariaDB     (Restart mariadb-server)
Starting the firewall and allowing the mariadb to access from port no. 3306
- systemctl start firewalld
- systemctl enable firewalld
- firewall-cmd --get-active-zones
- firewall-cmd --zone=public --add-port=3306/tcp --permanent
- firewall-cmd --reload
- systemctl restart mariadb


                                 # 2. MEMCACHE SETUP
- vagrant ssh mc01       (Login to the Memcache vm)
Verify Hosts entry, if entries missing update the it with IP and hostnames
- cat /etc/hosts
- dnf update-y           (Update OS with latest patches)
Install, start & enable memcache on port 11211
 - sudo dnf install epel-release-y
 - sudo dnf install memcached-y
 - sudo systemctl start memcached
 - sudo systemctl enable memcached
 - sudo systemctl status memcached
 - sed-i 's/127.0.0.1/0.0.0.0/g' /etc/sysconfig/memcached
 - sudo systemctl restart memcached

Starting the fire wall and allowing theport 11211 to access memcache
 - systemctl start firewalld
 - systemctl enable firewalld
 - firewall-cmd--add-port=11211/tcp
 - firewall-cmd--runtime-to-permanent
 - firewall-cmd--add-port=11111/udp
 - firewall-cmd--runtime-to-permanent
 - sudo memcached-p 11211-U 11111-u memcached-d

                                 # 3. RABBITMQ SETUP
 - Login to the RabbitMQ vm
 - vagrant ssh rmq01
 - dnf update -y  
 - dnf install epel-release -y
Install Dependencies
 - # sudo dnf install wget -y
 - dnf -y install centos-release-rabbitmq-38
 - dnf --enablerepo=centos-rabbitmq-38 -y install rabbitmq-server
 - systemctl enable --now rabbitmq-server

Setup access to user test and make it admin
 - sudo sh -c 'echo "[{rabbit, [{loopback_users, []}]}]." > /etc/rabbitmq/rabbitmq.config'
 - sudo rabbitmqctl add_user test test
 - sudo rabbitmqctl set_user_tags test administrator
 - rabbitmqctl set_permissions -p / test ".*" ".*" ".*"
 - sudo systemctl restart rabbitmq-server

Starting the firewall and allowing the port 5672 to access rabbitmq
 - sudo systemctl start firewalld
 - sudo systemctl enable firewalld
 - firewall-cmd --add-port=5672/tcp
 - firewall-cmd --runtime-to-permanent
 - sudo systemctl start rabbitmq-server
 - sudo systemctl enable rabbitmq-server
 - sudo systemctl status rabbitmq-server
 
                                # 4. TOMCAT SETUP                      
- vagrant ssh app01
- dnf update -y
- dnf install epel-release -y
Install Dependencies
- dnf -y install java-17-openjdk java-17-openjdk-devel
- dnf install git wget -y
-  cd /tmp/
Download & extract Tomcat Package
- wget https://archive.apache.org/dist/tomcat/tomcat-10/v10.1.26/bin/apache-tomcat-10.1.26.tar.gz
- tar xzvf apache-tomcat-10.1.26.tar.gz
- useradd --home-dir /usr/local/tomcat --shell /sbin/nologin tomcat      (Add tomcat user)
- cp -r /tmp/apache-tomcat-10.1.26/* /usr/local/tomcat/       (Copy data to tomcat home dir)
- chown -R tomcat.tomcat /usr/local/tomcat       (Copy data to tomcat home dir)
Setup systemctl command for tomcat
- vi /etc/systemd/system/tomcat.service  (Create tomcat service file)
Update file content below
   [Unit]
   Description=Tomcat
   After=network.target
   [Service]
   User=tomcat
   Group=tomcat
   WorkingDirectory=/usr/local/tomcat
   Environment=JAVA_HOME=/usr/lib/jvm/jre
   Environment=CATALINA_PID=/var/tomcat/%i/run/tomcat.pid
   Environment=CATALINA_HOME=/usr/local/tomcat
   Environment=CATALINE_BASE=/usr/local/tomcat
   ExecStart=/usr/local/tomcat/bin/catalina.sh run
   ExecStop=/usr/local/tomcat/bin/shutdown.sh
   RestartSec=10
   Restart=always
   [Install]
   WantedBy=multi-user.target

Reload systemd files
- systemctl daemon-reload

Start & Enable service
- systemctl start tomcat
- systemctl enable tomcat

Enabling the firewall and allowing port 8080 to access the tomcat
- systemctl start firewalld
- systemctl enable firewalld
- firewall-cmd --get-active-zones
- firewall-cmd --zone=public --add-port=8080/tcp --permanent
- firewall-cmd --reload
                                # CODE BUILD & DEPLOY (app01)
Maven Setup
- cd /tmp/
- wget https://archive.apache.org/dist/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.zip
- unzip apache-maven-3.9.9-bin.zip
- cp -r apache-maven-3.9.9 /usr/local/maven3.9
- export MAVEN_OPTS="-Xmx512m"

Download Source code

- git clone -b local https://github.com/hkhcoder/vprofile-project.git
Update configuration
- cd vprofile-project
- vim src/main/resources/application.properties     (this file has the backend configurations, has details of DB, passwords, port numbers, etc. we update it if we change these details)
Build code
- /usr/local/maven3.9/bin/mvn install    (run inside vprofile-project)
Deploy artifact
- systemctl stop tomcat

- rm -rf /usr/local/tomcat/webapps/ROOT*
- cp target/vprofile-v2.war /usr/local/tomcat/webapps/ROOT.war
- systemctl start tomcat
- chown tomcat.tomcat /usr/local/tomcat/webapps -R
- systemctl restart tomcat
                               5. NGINX SETUP
- vagrant ssh web01
- sudo -i
- apt update
- apt upgrade
Install nginx
- apt install nginx -y

Create Nginx conf file
- vi /etc/nginx/sites-available/vproapp
   * update with below content
upstream vproapp {
server app01:8080;
}
server {
listen 80;
location / {
proxy_pass http://vproapp;
}
}

- rm -rf /etc/nginx/sites-enabled/default    (Remove default nginx conf)
- ln -s /etc/nginx/sites-available/vproapp /etc/nginx/sites-enabled/vproapp       (Create link to activate website)
- systemctl restart nginx     

                             To validate 
- get ip of web01 in Vagrantfile  (192....)
- check on browser with https://ip_addr:8080










